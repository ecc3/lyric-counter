{"version":3,"sources":["utils.js","components/Loader.jsx","components/WordCloud.jsx","App.js","index.js"],"names":["getArtistId","artist","updateData","fetch","then","response","json","artistData","artistId","artists","id","getSongsByArtistId","catch","err","console","log","worksData","getAverageWordcountForSongs","works","songs","maxWordCount","minWordCount","totalWordCount","songCount","length","completedCount","allSongWords","forEach","song","title","lyricData","songWords","result","track","text","split","concat","songWordCount","averageWordCount","toFixed","Loader","className","resizeStyle","display","alignItems","justifyContent","border","background","options","colors","enableTooltip","deterministic","fontFamily","fontSizes","fontStyle","fontWeight","padding","rotations","rotationAngles","scale","spiral","transitionDuration","WordCloud","props","wordsAndTotals","words","reduce","acc","val","toLowerCase","test","formattedWords","word","push","value","defaultSize","width","height","style","App","state","isLoading","showWordCloud","handleChange","target","setState","handleSubmit","event","preventDefault","handleClick","currentState","this","action","onSubmit","type","name","onChange","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a20b013b.chunk.js","sourcesContent":["export const getArtistId = (artist, updateData) => {\n  fetch(\n    `https://musicbrainz.org/ws/2/artist/?query=artist:${artist}%20&fmt=json`\n  )\n    .then(response => response.json())\n    .then(artistData => {\n      const artistId = artistData.artists[0].id;\n      getSongsByArtistId(artistId, artist, updateData);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nconst getSongsByArtistId = (artistId, artist, updateData) => {\n  fetch(\n    `https://musicbrainz.org/ws/2/work?artist=${artistId}&fmt=json&limit=50`\n  )\n    .then(response => response.json())\n    .then(worksData => {\n      getAverageWordcountForSongs(worksData.works, artist, updateData);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nconst getAverageWordcountForSongs = (songs, artist, updateData) => {\n  //average count unaffected by instumental songs, x3 repeats for example, singers named in lyrics\n  let totalWordCount = 0;\n  let maxWordCount;\n  let minWordCount;\n  let songCount = songs.length;\n  let completedCount = 0;\n  let allSongWords = [];\n  songs.forEach(song => {\n    fetch(\n      `https://orion.apiseeds.com/api/music/lyric/${artist}/${song.title}?apikey=8bNBudkPyx6tcUQJ2dRUtPlUF6bwnRGPlrvnIZ4m5ySvJIziuLAP8o4TJ8uST2A7`\n    )\n      .then(response => response.json())\n      .then(lyricData => {\n        const songWords = lyricData.result.track.text.split(/\\s/);\n        allSongWords = allSongWords.concat(songWords);\n\n        const songWordCount = songWords.length;\n        totalWordCount += songWordCount;\n        completedCount++;\n\n        if (!minWordCount) {\n          minWordCount = songWordCount;\n          maxWordCount = songWordCount;\n        }\n        if (songWordCount < minWordCount) {\n          minWordCount = songWordCount;\n        }\n        if (songWordCount > maxWordCount) {\n          maxWordCount = songWordCount;\n        }\n        if (completedCount === songCount) {\n          const averageWordCount = (totalWordCount / songCount).toFixed(0);\n          updateData(\n            averageWordCount,\n            minWordCount,\n            maxWordCount,\n            allSongWords\n          );\n        }\n      })\n      .catch(err => {\n        songCount--;\n        if (completedCount === songCount) {\n          const averageWordCount = (totalWordCount / songCount).toFixed(0);\n          updateData(\n            averageWordCount,\n            minWordCount,\n            maxWordCount,\n            allSongWords\n          );\n        }\n      });\n  });\n};\n","import React from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loader\">\n      <h2>LOADING</h2>\n      <ClipLoader />\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport { Resizable } from \"re-resizable\";\n\nconst resizeStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  border: \"solid 1px #ddd\",\n  background: \"#ffffff\"\n};\n\nconst options = {\n  colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\n  enableTooltip: true,\n  deterministic: false,\n  fontFamily: \"Open Sans\",\n  fontSizes: [5, 60],\n  fontStyle: \"normal\",\n  fontWeight: \"normal\",\n  padding: 1,\n  rotations: 3,\n  rotationAngles: [0, 90],\n  scale: \"sqrt\",\n  spiral: \"archimedean\",\n  transitionDuration: 1000\n};\n\nconst WordCloud = props => {\n  const { words } = props;\n\n  const wordsAndTotals = words.reduce((acc, val) => {\n    val = val.toLowerCase();\n    if (val.length > 5 && !/,.:[\\]]/.test(val)) {\n      acc[val] ? acc[val]++ : (acc[val] = 1);\n    }\n    return acc;\n  }, {});\n\n  const formattedWords = [];\n\n  for (const word in wordsAndTotals) {\n    if (wordsAndTotals[word] > 0) {\n      formattedWords.push({\n        text: word,\n        value: wordsAndTotals[word]\n      });\n    }\n  }\n\n  return (\n    <Resizable\n      defaultSize={{\n        width: 600,\n        height: 300\n      }}\n      style={resizeStyle}\n    >\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        <ReactWordcloud options={options} words={formattedWords} />\n      </div>\n    </Resizable>\n  );\n};\n\nexport default WordCloud;\n","import React, { Component } from \"react\";\nimport { getArtistId } from \"./utils\";\nimport Loader from \"./components/Loader\";\nimport \"./App.css\";\nimport WordCloud from \"./components/WordCloud\";\n\nclass App extends Component {\n  state = {\n    artist: \"\",\n    averageWordCount: \"\",\n    minWordCount: \"\",\n    maxWordCount: \"\",\n    allSongWords: [],\n    isLoading: false,\n    showWordCloud: false\n  };\n\n  handleChange = ({ target }) => {\n    if (target.value === \"\") {\n      this.setState({ artist: \"\", averageWordCount: \"\", allSongWords: [] });\n    } else this.setState({ artist: target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.setState({ isLoading: true });\n    getArtistId(this.state.artist, this.updateData);\n  };\n\n  updateData = (averageWordCount, minWordCount, maxWordCount, allSongWords) => {\n    this.setState({\n      averageWordCount,\n      minWordCount,\n      maxWordCount,\n      allSongWords,\n      isLoading: false\n    });\n  };\n\n  handleClick = () => {\n    this.setState(currentState => {\n      return this.setState({ showWordCloud: !currentState.showWordCloud });\n    });\n  };\n\n  render() {\n    const {\n      artist,\n      averageWordCount,\n      isLoading,\n      minWordCount,\n      maxWordCount,\n      allSongWords,\n      showWordCloud\n    } = this.state;\n    return (\n      <main className=\"main\">\n        <div className=\"content\">\n          <form action=\"\" onSubmit={this.handleSubmit}>\n            Artist name:{\" \"}\n            <input\n              type=\"text\"\n              name=\"artist\"\n              value={artist}\n              onChange={this.handleChange}\n              className=\"submit\"\n            />\n            <br />\n            <input type=\"submit\" value=\"Submit\" className=\"submit\" />\n            {this.state.averageWordCount && (\n              <div>\n                <p>\n                  Average words in songs by {artist}: {averageWordCount}\n                </p>\n                <p>Maximum words across songs sampled: {maxWordCount}</p>\n                <p>Minimum words across songs sampled: {minWordCount}</p>\n              </div>\n            )}\n            {isLoading && <Loader />}\n          </form>\n          <section>\n            <button onClick={this.handleClick} className=\"submit\">\n              Show Word Cloud\n            </button>\n            {showWordCloud && !averageWordCount && (\n              <p>Please search for an artist</p>\n            )}\n            {showWordCloud && averageWordCount && (\n              <WordCloud words={allSongWords} />\n            )}\n          </section>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}